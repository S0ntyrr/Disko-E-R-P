Disko E.R.P - Sistema de Gesti√≥n Empresarial
https://img.shields.io/badge/Version-1.0.0-blue.svg
https://img.shields.io/badge/Java-17-orange.svg
https://img.shields.io/badge/Spring%2520Boot-3.0-green.svg
https://img.shields.io/badge/MySQL-8.0-blue.svg

üìã Tabla de Contenidos
Descripci√≥n

Caracter√≠sticas Principales

Requisitos del Sistema

Instalaci√≥n y Configuraci√≥n

Configuraci√≥n de la Base de Datos

Sistema de Login

Estructura del Proyecto

Uso de la Aplicaci√≥n

Despliegue

Soluci√≥n de Problemas

üöÄ Descripci√≥n
Disko E.R.P es un sistema de planificaci√≥n de recursos empresariales desarrollado en Java con Spring Boot que permite gestionar m√∫ltiples aspectos de una empresa de manera integrada.

‚ú® Caracter√≠sticas Principales
üîê Sistema de Autenticaci√≥n Segura

üë• Gesti√≥n de Usuarios y Roles

üì¶ Gesti√≥n de Inventario

üí∞ M√≥dulo de Ventas y Facturaci√≥n

üìä Reportes y Dashboard

üè¢ Gesti√≥n de Clientes y Proveedores

üîí Control de Acceso por Roles

üõ† Requisitos del Sistema
Software Requerido
Java JDK 17 o superior

MySQL 8.0 o superior

Maven 3.6 o superior

Git para clonar el repositorio

Dependencias Principales
Spring Boot 3.0+

Spring Security

Spring Data JPA

MySQL Connector

JWT para autenticaci√≥n

Thymeleaf (opcional para vistas web)

üì• Instalaci√≥n y Configuraci√≥n
1. Clonar el Repositorio
bash
git clone https://github.com/S0ntyrr/Disko-E-R-P.git
cd Disko-E-R-P
2. Configurar el Entorno
Aseg√∫rate de tener Java 17 instalado:

bash
java -version
3. Compilar el Proyecto
bash
mvn clean install
4. Ejecutar la Aplicaci√≥n
bash
mvn spring-boot:run
O compilar el JAR y ejecutar:

bash
mvn clean package
java -jar target/disko-erp-1.0.0.jar
üóÑ Configuraci√≥n de la Base de Datos
1. Crear Base de Datos MySQL
sql
CREATE DATABASE disko_erp;
CREATE USER 'disko_user'@'localhost' IDENTIFIED BY 'tu_password_seguro';
GRANT ALL PRIVILEGES ON disko_erp.* TO 'disko_user'@'localhost';
FLUSH PRIVILEGES;
2. Configurar Application Properties
Crea el archivo src/main/resources/application.properties:

properties
# Configuraci√≥n de Base de Datos
spring.datasource.url=jdbc:mysql://localhost:3306/disko_erp
spring.datasource.username=disko_user
spring.datasource.password=tu_password_seguro

# Configuraci√≥n JPA/Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Configuraci√≥n del Servidor
server.port=8080
spring.application.name=Disko-ERP

# Configuraci√≥n de Seguridad
jwt.secret=tu_jwt_secret_muy_seguro_y_largo
jwt.expiration=86400000

# Configuraci√≥n de Logging
logging.level.com.disko.erp=DEBUG
3. Ejecutar Migraciones (si aplica)
La aplicaci√≥n crear√° autom√°ticamente las tablas necesarias al iniciar con ddl-auto=update.

üîê Sistema de Login
Caracter√≠sticas de Seguridad
Autenticaci√≥n JWT (JSON Web Tokens)

Encriptaci√≥n de contrase√±as con BCrypt

Control de sesiones

Protecci√≥n contra CSRF

Configuraci√≥n de CORS

Usuarios por Defecto
Al iniciar por primera vez, se crean usuarios predeterminados:

Administrador:

Usuario: admin

Contrase√±a: admin123

Rol: ADMIN

Usuario Regular:

Usuario: usuario

Contrase√±a: user123

Rol: USER

Endpoints de Autenticaci√≥n
http
POST /api/auth/login
Content-Type: application/json

{
  "username": "tu_usuario",
  "password": "tu_contrase√±a"
}
Respuesta:

json
{
  "token": "jwt_token",
  "username": "tu_usuario",
  "roles": ["ROLE_USER"],
  "expiresIn": 86400000
}
Configuraci√≥n de Roles
ROLE_ADMIN: Acceso completo al sistema

ROLE_USER: Acceso limitado a m√≥dulos b√°sicos

ROLE_MANAGER: Acceso a gesti√≥n y reportes
üñ• Uso de la Aplicaci√≥n
1. Acceder al Sistema
Abre tu navegador y ve a: http://localhost:8080

Ingresa tus credenciales en el formulario de login

2. Navegaci√≥n Principal
Dashboard: Vista general del sistema

Usuarios: Gesti√≥n de usuarios y permisos

Inventario: Control de productos y stock

Ventas: Procesos de venta y facturaci√≥n

Reportes: Generaci√≥n de reportes y estad√≠sticas

3. Funciones por M√≥dulo
M√≥dulo de Usuarios
Crear, editar y eliminar usuarios

Asignar roles y permisos

Gestionar perfiles de usuario

M√≥dulo de Inventario
Gestionar categor√≠as de productos

Control de stock y alertas

Movimientos de inventario

M√≥dulo de Ventas
Procesar √≥rdenes de venta

Generar facturas

Gesti√≥n de clientes

üöÄ Despliegue
Despliegue en Producci√≥n
Configuraci√≥n de Producci√≥n:

properties
spring.profiles.active=prod
spring.jpa.hibernate.ddl-auto=validate
Variables de Entorno:

bash
export DATABASE_URL=tu_url_de_produccion
export DATABASE_USERNAME=tu_usuario
export DATABASE_PASSWORD=tu_password
export JWT_SECRET=tu_jwt_secret_seguro
Ejecutar en Producci√≥n:

bash
java -jar -Dspring.profiles.active=prod disko-erp-1.0.0.jar
Docker (Opcional)
dockerfile
FROM openjdk:17-jdk-slim
COPY target/disko-erp-1.0.0.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java","-jar","/app.jar"]
üêõ Soluci√≥n de Problemas
Problemas Comunes
Error de Conexi√≥n a BD:

Verifica que MySQL est√© ejecut√°ndose

Confirma credenciales en application.properties

Asegura que la base de datos exista

Puerto en Uso:

bash
# Verificar procesos en puerto 8080
netstat -ano | findstr :8080
# Cambiar puerto en application.properties
server.port=8081
Problemas de Autenticaci√≥n:

Verificar que los usuarios est√©n creados

Revisar configuraci√≥n de JWT

Verificar encriptaci√≥n de contrase√±as

Logs y Debugging
Habilita logs detallados en application.properties:

properties
logging.level.org.springframework.security=DEBUG
logging.level.com.disko.erp=DEBUG
ü§ù Contribuci√≥n
Fork el proyecto

Crea una rama para tu feature (git checkout -b feature/AmazingFeature)

Commit tus cambios (git commit -m 'Add some AmazingFeature')

Push a la rama (git push origin feature/AmazingFeature)

Abre un Pull Request